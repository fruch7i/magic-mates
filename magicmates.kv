<PlayingField>:

<BasicBoxLayout>:

<Label>:
	font_size: 25
	_scale: 1. if self.texture_size[0] < self.width else float(self.width) / (self.texture_size[0]+1)
	canvas.before:
		PushMatrix
		Scale:
			origin: self.center
			x: self._scale or 1.
			y: self._scale or 1.
	canvas.after:
		PopMatrix

<TutorialSelectScreen>:
	BoxLayout:
		orientation: 'vertical'
		Label:
			text: 'Tutorial'
		Button:
			text: 'Basics: Movement'
			on_release: root.start_tutorial('tutorial basic movement')
		Button:
			text: 'Basics: Attacking'
			on_release: root.start_tutorial('tutorial basic attacking')
		Button:
			text: 'Shields'
			on_release: root.start_tutorial('tutorial shields')
		Button:
			text: 'Weapons'
			on_release: root.start_tutorial('tutorial weapons')
		Button:
			text: 'Abilities'
			on_release: root.start_tutorial('tutorial abilities')
		Button:
			text: 'Back to Menu'
			on_release: root.manager.current = 'menu'

<MenuScreen>:
	BoxLayout:
		orientation: 'vertical'
		Button:
			text: 'Back to match'
			on_release: root.manager.current = 'board'
		Button:
			text: 'New Match'
			on_release: root.start_game('standard')
		Button:
			text: 'Sandbox (for devs and bugfixing only)'
			on_release: root.start_game('sandbox')
		Button:
			text: 'Tutorial'
			on_release: root.manager.current = 'tutorial_select'
		Button:
			text: 'Quit'
			on_release: root.manager.quit_game()

<BoardScreen>:
	BasicBoxLayout:
		orientation: 'vertical'
		BasicBoxLayout:
			size_hint: 1.0, 0.1
			orientation: 'horizontal'
			Label:
				text: 'MAGIC MATES'
			Button:
				text: 'Menu'
				on_release: root.manager.current = 'menu'
		MagicMatesGame:
			size_hint: 1.0, 0.9
			id: game

<AbilityPrompt>:
	BoxLayout:
		orientation: 'horizontal'
		Button:
			on_press: root.ap_on_press()
			on_release: root.ap_on_release()
			text: root.name
		Label:
			text: root.manacost_label

<SelectButton>:
	pos_hint: {'x':0.25, 'y':0.25}
	size_hint: (0.5, 0.5)
	on_release: self.sb_on_release()

<EmptyField>:
	Button:
		on_release: root.ef_on_release()

<LevelUpButton>:
	text: self.upgrade
	on_release: self.lub_on_release()

<LevelUpLayout>:
	orientation: 'vertical'

<LevelUpPopup>:
	title: 'Ability leveled up!'

<TutorialPopup>:
	title: 'Tutorial'
	size_hint: 1.0, 0.4
	pos_hint: {'x': 0., 'y': 0.}
	BoxLayout:
		orientation: 'vertical'
		Label:
			size_hint: 1.0, 0.6
			text_size: 0.9 * self.width, None
			text: root.info_text
		Button:
			size_hint: 1.0, 0.2
			text: 'continue'
			on_release: root.dismiss()

<AbilityInfoPopup>:
	title: 'Ability information'
	size_hint: None, 0.9
	width: self.height
	pos_hint: {'x': 0., 'y': 0.}
	BoxLayout:
		orientation: 'vertical'
		Label:
			text: root.info_label
		Label:
			text: root.manacost_label
		Image:
			source: 'gfx/icons/half_time.png' if root.time_usage == 'half' else 'gfx/icons/full_time.png'

<MateInfoPopup>:
	title: 'Mate information'
	BoxLayout:
		orientation: 'vertical'
		BoxLayout:
			orientation: 'vertical'
			Label:
				text: root.team_label
			Label:
				text: root.weapon_label
			BoxLayout:
				orientation: 'horizontal'
				Label:
					text: root.health_label
				Label:
					text: root.armor_label
			BoxLayout:
				orientation: 'horizontal'
				Label:
					text: root.mana_label
				Label:
					text: root.time_label
		Label:
			text: root.abilities_label
		Label:
			text: root.status_effect_label
		Button:
			text: 'BACK'
			on_release: root.dismiss()

<Mate>:
	canvas:
		Color:
			rgba: (0.8, 0, 0, 1)
		Rectangle:
			pos: (self.x, self.y + self.height - 0.05 * self.height)
			size: (self.size[0] * self.health / self.max_health, 0.05 * self.height)
		Color:
			rgba: (0, 0.7, 0, 1) 
		Rectangle:
			pos: (self.x, self.y + self.height - 0.1 * self.height)
			size: (self.size[0] * self.armor / self.max_armor, 0.05 * self.height)
		Color:
			rgba: (0, 0, 0.9, 1)

		Rectangle:
			pos: (self.x, self.y + self.height - 0.15 * self.height)
			size: (self.size[0] * self.mana / self.max_mana, 0.05 *  self.height)
		Color:
			rgba: (1., 1., 1., 1) if self.t < self.max_t else (0.8, 0.8, 0., 1)
		Rectangle:
			pos: (self.x, self.y + self.height - 0.2 * self.height)
			size: (self.size[0] * self.t / self.max_t, 0.05 * self.height)
	Button:
		background_normal: root.button_normal_path
		pos: (root.x+0.2*root.width, root.y)
		size_hint: (None, None)
		size: (0.8*root.width, 0.8*root.height)
		on_release: root.ma_on_release()
	Image:
		source: 'gfx/status_effects/more.png'
		pos: (root.x, root.y)
		size_hint: (None, None)
		size: (0.2*root.width, 0.2*root.height)
		allow_stretch: True
	Image:
		source: 'gfx/status_effects/more.png'
		pos: (root.x, root.y+0.2*root.height)
		size_hint: (None, None)
		size: (0.2*root.width, 0.2*root.height)
		allow_stretch: True
	Image:
		source: 'gfx/status_effects/more.png'
		pos: (root.x, root.y+0.4*root.height)
		size_hint: (None, None)
		size: (0.2*root.width, 0.2*root.height)
	Image:
		source: 'gfx/status_effects/more.png'
		pos: (root.x, root.y+0.6*root.height)
		size_hint: (None, None)
		size: (0.2*root.width, 0.2*root.height)

<MagicMatesGame>:
	orientation: 'horizontal'
	PlayingField:
		size_hint: None, 1.0
		width: self.height
		id: playing_field
	AbilityMenu:
		id: ability_menu
		orientation: 'vertical'
		Label:
			text: 'Choose ability'
